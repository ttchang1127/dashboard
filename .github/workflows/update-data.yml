const https = require('https');
const fs = require('fs');

// --- 組態設定 ---
const SPREADSHEET_ID = '1GjhgGAUuI5g6rtOGiUceMLgeGy12sp93fNQlWKM-UGc';
const API_KEY = process.env.GOOGLE_API_KEY;

// 人員資料工作表設定 (欄位: 姓名, 組別, 職稱, 學歷, 證照)
const PERSONNEL_SHEET = { name: '工作表3', range: 'E1:I100', file: 'personnelData.json' };
// 績效資料工作表設定 (第一列為組名，第二列為金額)
const PERFORMANCE_SHEET = { name: '工作表2', range: 'B1:F2', file: 'performanceData.json' };

// 檢查 API 金鑰是否存在
if (!API_KEY) {
  console.error('錯誤: 找不到 GOOGLE_API_KEY secret！請在 GitHub 儲存庫的 Settings > Secrets and variables > Actions 中設定。');
  process.exit(1);
}

// --- 核心函式 ---

// 從 Google Sheet API 抓取資料的通用函式
function fetchSheetData(sheetName, range) {
  return new Promise((resolve, reject) => {
    // [修正] 對樣板字面值中的 '$' 進行跳脫，避免 shell 解析錯誤
    const url = `https://sheets.googleapis.com/v4/spreadsheets/\${SPREADSHEET_ID}/values/\${encodeURIComponent(sheetName)}!\${range}?key=\${API_KEY}`;
    https.get(url, (res) => {
      let rawData = '';
      res.on('data', (chunk) => { rawData += chunk; });
      res.on('end', () => {
        try {
          const parsed = JSON.parse(rawData);
          if (parsed.values) {
            resolve(parsed.values);
          } else {
            // [修正] 對樣板字面值中的 '$' 進行跳脫
            const errorMsg = parsed.error ? `Google API 錯誤: \${JSON.stringify(parsed.error.message)}` : '在工作表回應中找不到 "values" 欄位。';
            reject(new Error(errorMsg));
          }
        } catch (e) { reject(e); }
      });
    }).on('error', (e) => reject(e));
  });
}

// [優化] 處理人員資料：增加對空資料的檢查
function processPersonnelData(values) {
  if (!values || values.length < 1) {
    console.warn('⚠️ 人員資料工作表為空或讀取失敗，略過處理。');
    fs.writeFileSync(PERSONNEL_SHEET.file, JSON.stringify([], null, 2));
    return;
  }
  const headerMapping = { '姓名': 'name', '組別': 'group', '職稱': 'role', '學歷': 'education', '證照': 'certificates' };
  const headers = values[0];
  const dataRows = values.slice(1);

  const personnel = dataRows.map(row => {
    const person = {};
    headers.forEach((header, index) => {
      const englishKey = headerMapping[header];
      if (englishKey) {
        const value = row[index] || '';
        if (englishKey === 'certificates') {
          person[englishKey] = value.split(/[,、，\\s]+/).map(cert => cert.trim()).filter(cert => cert);
        } else {
          person[englishKey] = value.trim();
        }
      }
    });
    return person;
  }).filter(p => p.name); 

  // [修正] 對樣板字面值中的 '$' 進行跳脫
  fs.writeFileSync(PERSONNEL_SHEET.file, JSON.stringify(personnel, null, 2));
  console.log(`✅ 成功擷取資料並寫入 \${PERSONNEL_SHEET.file}`);
}

// [優化] 處理績效資料：使其更具彈性，處理長度不匹配的情況
function processPerformanceData(values) {
  if (!values || values.length < 2) {
    console.warn('⚠️ 績效資料格式不正確或為空，應至少有兩列（組別、金額）。略過處理。');
    fs.writeFileSync(PERFORMANCE_SHEET.file, JSON.stringify([], null, 2));
    return;
  }

  const groups = values[0];
  const amounts = values[1];

  if (groups.length !== amounts.length) {
    // [修正] 對樣板字面值中的 '$' 進行跳脫
    console.warn(`⚠️ 警告: 組別數量 (\${groups.length}) 與金額數量 (\${amounts.length}) 不匹配。將以較短的數量為準進行處理。`);
  }

  const minLength = Math.min(groups.length, amounts.length);
  const transformedData = [];
  for (let i = 0; i < minLength; i++) {
    transformedData.push([groups[i], amounts[i]]);
  }

  fs.writeFileSync(PERFORMANCE_SHEET.file, JSON.stringify(transformedData, null, 2));
  // [修正] 對樣板字面值中的 '$' 進行跳脫
  console.log(`✅ 成功擷取並轉換資料，寫入 \${PERFORMANCE_SHEET.file}`);
}

// --- 主執行函式 ---
async function main() {
  console.log('🚀 開始從 Google Sheets 更新資料...');
  try {
    const [personnelValues, performanceValues] = await Promise.all([
      fetchSheetData(PERSONNEL_SHEET.name, PERSONNEL_SHEET.range),
      fetchSheetData(PERFORMANCE_SHEET.name, PERFORMANCE_SHEET.range)
    ]);
    
    processPersonnelData(personnelValues);
    processPerformanceData(performanceValues);

    console.log('✨ 所有資料更新完成！');
  } catch (error) {
    console.error('❌ 更新過程中發生錯誤:', error.message);
    process.exit(1);
  }
}

main();
